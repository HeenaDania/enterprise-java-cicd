pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = '210161286173.dkr.ecr.us-east-1.amazonaws.com/demo-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        DOCKER_IMAGE = "${ECR_REPO}:${IMAGE_TAG}"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                dir('app') {
                    bat 'mvn clean package'
                }
            }
        }
        stage('Code Quality') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    bat 'mvn sonar:sonar'
                }
            }
        }
        stage('Docker Build & Push') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr-creds']]) {
                    bat """
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                        docker build -t $DOCKER_IMAGE .
                        docker push $DOCKER_IMAGE
                    """
                }
            }
        }
        stage('Update GitOps Repo') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'ebcb8140-70bc-49ff-b84f-af208749eeb4', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    bat """
                        git config --global user.email "heena.dania7@gmail.com"
                        git config --global user.name "$GIT_USER"
                        git clone https://$GIT_USER:$GIT_PASS@github.com/HeenaDania/enterprise-java-gitops.git
                        cd enterprise-java-gitops
                        sed -i "s|image: .*|image: $DOCKER_IMAGE|g" deployment.yaml
                        git add deployment.yaml
                        git commit -m "Update image tag to $DOCKER_IMAGE"
                        git push origin main
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Build failed!'
        }
    }
}
